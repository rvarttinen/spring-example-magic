plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.diffplug.eclipse.apt" version "4.3.0" // Mapstruct - only for Eclipse 
}

group = 'se.autocorrect'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'			// The regular starter
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'	// Adding HATEOAS/REST
	implementation 'org.springframework.boot:spring-boot-starter-aop'		// Adding Aspects to the picture
	implementation 'org.springframework.boot:spring-boot-starter-graphql'	// Adding GraphQL capabilities
	
	implementation 'org.apache.jena:apache-jena-libs:5.3.0'					// The regular lib for RDF
	implementation 'org.apache.jena:jena-querybuilder:5.3.0'				// The Query builders for RDF
	implementation 'org.apache.jena:jena-fuseki-main:5.3.0'					// The main lib for Fuseki (SPARQL endpoint)
	
	// Spring Boot is opinionated in several ways, whereas one is delivering only JSON out-of-the-box by default
	// This dependecy added for suppot of XML ... 
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.3'
	
	implementation 'org.mapstruct:mapstruct:1.6.3'							// The mapper between different structures
	implementation 'com.google.guava:guava:33.4.0-jre'						// Some common and useful utilities
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'			// The Mapstruct annotation processor
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'	// Test capabilties for Spring Boot
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'			
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'		// Mapstruct annotation process for test code
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'se.autocorrect.springexample.SpringExampleMagicApplication'
    }
    
    archiveBaseName = project.name + '-all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    
    with jar
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
options.compilerArgs = ['-parameters']
doFirst {
    println "Compiler args: ${options.compilerArgs}"
}}

compileJava {
    options.compilerArgs += [
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.suppressGeneratorVersionInfoComment=true',
        '-Amapstruct.verbose=true',
        '-Amapstruct.defaultComponentModel=spring'
    ]
}
